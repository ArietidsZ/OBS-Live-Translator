name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            pkg-config \
            cmake \
            g++ \
            libclang-dev
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Package
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/obs-live-translator dist/
          cp -r models dist/
          cp scripts/deploy.sh dist/install.sh
          chmod +x dist/install.sh
          tar -czf obs-live-translator-linux-${{ matrix.target }}.tar.gz -C dist .
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.target }}
          path: obs-live-translator-linux-${{ matrix.target }}.tar.gz

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Package
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/obs-live-translator dist/
          cp -r models dist/
          tar -czf obs-live-translator-macos-${{ matrix.target }}.tar.gz -C dist .
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: macos-${{ matrix.target }}
          path: obs-live-translator-macos-${{ matrix.target }}.tar.gz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Install ONNX Runtime
        run: |
          Invoke-WebRequest -Uri https://github.com/microsoft/onnxruntime/releases/download/v1.16.0/onnxruntime-win-x64-1.16.0.zip -OutFile onnxruntime.zip
          Expand-Archive onnxruntime.zip -DestinationPath .
          $env:ONNXRUNTIME_LIB_DIR = "$PWD\onnxruntime-win-x64-1.16.0\lib"
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      
      - name: Package
        run: |
          New-Item -ItemType Directory -Force -Path dist
          Copy-Item target\${{ matrix.target }}\release\obs-live-translator.exe dist\
          Copy-Item -Recurse models dist\
          Compress-Archive -Path dist\* -DestinationPath obs-live-translator-windows-${{ matrix.target }}.zip
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-${{ matrix.target }}
          path: obs-live-translator-windows-${{ matrix.target }}.zip

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/obs-live-translator
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create Release
    needs: [build-linux, build-macos, build-windows, build-docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Create checksums
        run: |
          cd artifacts
          for file in */*; do
            sha256sum "$file" >> checksums.txt
          done
      
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate release notes
        id: notes
        run: |
          cat > release_notes.md << EOF
          # OBS Live Translator ${{ steps.version.outputs.version }}
          
          ## What's New
          - Performance improvements
          - Bug fixes
          - Updated models
          
          ## Installation
          
          ### Linux
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/obs-live-translator-linux-x86_64.tar.gz
          tar -xzf obs-live-translator-linux-x86_64.tar.gz
          sudo ./install.sh
          \`\`\`
          
          ### macOS
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/obs-live-translator-macos.tar.gz
          tar -xzf obs-live-translator-macos.tar.gz
          ./obs-live-translator
          \`\`\`
          
          ### Windows
          Download and extract the Windows ZIP file, then run obs-live-translator.exe
          
          ### Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          \`\`\`
          
          ## Checksums
          See checksums.txt for SHA256 hashes of all artifacts.
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/*/*
            artifacts/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Update Homebrew formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_TOKEN }}
          formula: obs-live-translator
          tag: ${{ github.ref_name }}

  notify:
    name: Send Notifications
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord notification
        if: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{"content": "ðŸš€ OBS Live Translator ${{ github.ref_name }} has been released! https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"}' \
               ${{ secrets.DISCORD_WEBHOOK }}
      
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
               --data '{"text":"ðŸš€ OBS Live Translator ${{ github.ref_name }} has been released! https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"}' \
               ${{ secrets.SLACK_WEBHOOK }}